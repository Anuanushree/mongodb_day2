use zenClassdb;
switched to db zenClassdb
show collections;
db.createCollection("user");
db.createCollection("codekata");
db.createCollection("tasks");
db.createCollection("topic");
db.createCollection("mentors");
db.createCollection("company_drive");




1.Find all the topics and tasks which are thought in the month of October

db.topic.aggregate([
    { $lookup:
        {
           from: 'tasks',
           localField: 'id',
           foreignField: 'id',
           as: 'Data'
        }
    },
    { $unwind: '$Data'},
    {
    $project:{
        "_id":0,
        "id":1,
        "class_topic":1,
        "Data.task":1
        }	
}
]).pretty();

solution:
{
  id: 1,
  class_topic: ['data-types','array' ],
  Data: {
    task: 'describe an blog document and object'
  }
}
{
  id: 2,
  class_topic: ['array-types','string'],
  Data: {
    task: 'for the given iterate all the loops(for ,for in ,for of)'
  }
}
{
  id: 3,
  class_topic: [ 'function','array-methods'],
  Data: {
    task: 'Do the below programs in anonymous function & IIFE'
  }
}
{
  id: 4,
  class_topic: ['map', 'filter','reduce'],
  Data: {
    task: 'get the data using filter and map function'
  }
}{
  id: 5,
  class_topic: ['dbms-algo','stack'],
  Data: {
    task: 'create a simple stack program'
  }
}
{
  id: 6,
  class_topic: ['html','css'],
  Data: {
    task: 'From the below Title you can pick any two and complete them with responsive design.'
  }
}
{
  id: 7,
  class_topic: [ 'pesudo','box-model'],
  Data: {
    task: 'practise'
  }
}{
  id: 8,
  class_topic: ['dom'],
  Data: {
    task: 'design a form and the all the tags are create in dom '
  }
}
{
  id: 9,
  class_topic: ['promise','fetch'],
  Data: {
    task: 'choose any public api to implement the task '
  }
}
{
  id: 10,
  class_topic: ['api-call'],
  Data: {
    task: 'use restcountries pubic api and get the data'
  }
}


2 .Find all the company drives which appeared between 15 oct-2020 and 31-oct-2020

db.company_drive.find({
  $and: [
    { date: { $gte: ISODate("2020-10-15") } },
    { date: { $lte: ISODate("2020-10-31") } },
  ]
},{_id:0,date:1,company_name:1});

solution:
{
  company_name: 'zzz',
  date: 2020-10-16T00:00:00.000Z
}
{
  company_name: 'xx',
  date: 2020-10-20T00:00:00.000Z
}
{
  company_name: 'yyy',
  date: 2020-10-28T00:00:00.000Z
}

3.Find all the company drives and students who are appeared for the placement.

db.company_drive.aggregate([
  {
    $lookup: {
      from: "user",
      localField: "student_attend",
      foreignField: "id",
      as: "results",
    },
  },{
      $project:{
      _id:0,
      date:1,
      company_name:1,
      "results.name":1,
      "results.batch":1
      }}
]);

solution:
{
  company_name: 'xxx',
  date: 2020-09-07T00:00:00.000Z,
  results: [
    {
      name: 'Anu',
      batch: 'b47'
    },
    {
      name: 'Ammu',
      batch: 'b47'
    }
  ]
}
{
  company_name: 'yyy',
  date: 2020-10-12T00:00:00.000Z,
  results: [
    {
      name: 'radhi',
      batch: 'b47'
    },
    {
      name: 'Abi',
      batch: 'b47'
    },
    {
      name: 'rohith',
      batch: 'b47'
    }
  ]
}
{
  company_name: 'zzz',
  date: 2020-10-16T00:00:00.000Z,
  results: [
    {
      name: 'Ammu',
      batch: 'b47'
    },
    {
      name: 'radhi',
      batch: 'b47'
    },
    {
      name: 'Abi',
      batch: 'b47'
    }
  ]
}
{
  company_name: 'xx',
  date: 2020-10-20T00:00:00.000Z,
  results: [
    {
      name: 'Ammu',
      batch: 'b47'
    },
    {
      name: 'radhi',
      batch: 'b47'
    },
    {
      name: 'Abi',
      batch: 'b47'
    }
  ]
}
{
  company_name: 'yyy',
  date: 2020-10-28T00:00:00.000Z,
  results: [
    {
      name: 'Ammu',
      batch: 'b47'
    },
    {
      name: 'radhi',
      batch: 'b47'
    }
  ]
}



4 . Find the number of problems solved by the user in codekata

db.user.aggregate([
    { $lookup:
        {
           from: 'codekata',
           localField: 'id',
           foreignField: 'id',
           as: 'Data'
        }
    },
    {
       $unwind: '$Data'
    },

    {
    $project:{
        "_id":0,
        "id":1,
        "name":1,
        "Data.problem_solved":1
        }	
}
]).pretty();
 solution::
            {
            id: 1,
            name: 'Anu',
            Data: {
              problem_solved: '100'
            }
          }
          {
            id: 2,
            name: 'Ammu',
            Data: {
              problem_solved: '10'
            }
          }
          {
            id: 3,
            name: 'radhi',
            Data: {
              problem_solved: '50'
            }
          }
          {
            id: 4,
            name: 'Abi',
            Data: {
              problem_solved: '200'
            }
          }

5. Find all the mentors with who has the mentee's count more than 15

db.mentors.find({mentees:{$gt:15}},{_id:0,mentor_name:1});

 solution: ' mentor_name': 'zzz',

6.Find the number of users who are absent and task is not submitted  between 15 oct-2020 and 31-oct-2020

let result =db.tasks.aggregate([
  {$match:{$and:[{date:{$gt:ISODate("2023-10-15") }},{date:{$lt:ISODate("2023-10-31")}}]}},
  {$project:{
  values:{$setUnion:["$present_student","$task_submitted_students"]}
}},

  {$unwind:"$values"},
  {$group:{_id:0,values:{$addToSet:"$values"}}},
  {$project:{values:1,_id:0}},

]);
db.user.find({ user_id: { $nin:result } }).count();

solution : 1